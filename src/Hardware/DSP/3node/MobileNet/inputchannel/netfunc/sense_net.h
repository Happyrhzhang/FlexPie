#ifndef SENSENET_SENSE_NET_H_
#define SENSENET_SENSE_NET_H_


#include "common.h"
#include "commondef.h"
extern "C"
{
#include <dsplib.h>
}


extern "C" {
#include "SRIO/SRIO_Test.h"
}
//分块策略：保持整行，对图像高度划分为7块，分别进行计算。
									// con              con             con        10(5x2)                 conv
const int img_height[20]=     {224,112,112,112,56 ,56 ,56 ,56 ,28 ,28 ,28 ,28 ,14 ,14 ,14 ,7   ,7   ,7   ,7   ,7   };
const int img_width[20]=      {224,112,112,112,56 ,56 ,56 ,56 ,28 ,28 ,28 ,28 ,14 ,14 ,14 ,7   ,7   ,7   ,7   ,7   };
const int input_channel[20]=  {3  ,32 ,32 ,64 ,64 ,128,128,128,128,256,256,256,256,512,512,512 ,1024,1024,1024,1024};
const int output_channel[20]= {32 ,32 ,64 ,64 ,128,128,128,128,256,256,256,256,512,512,512,1024,1024,512 ,512 ,1024};



//const int channel_group[20][8][4] =
//{
//	{ { 1, 0+8*DeviceId, 0, 0 },{ 1, 1+8*DeviceId, 0, 0 },{ 1, 2+8*DeviceId, 0, 0 },{ 1, 3+8*DeviceId, 0, 0 },{ 1, 4+8*DeviceId, 0, 0 },{ 1, 5+8*DeviceId, 0, 0 },{ 1, 6+8*DeviceId, 0, 0 },{ 1, 8+8*DeviceId, 0, 0 } },
//	{ { 1, 0+8*DeviceId, 0, 0 },{ 1, 1+8*DeviceId, 0, 0 },{ 1, 2+8*DeviceId, 0, 0 },{ 1, 3+8*DeviceId, 0, 0 },{ 1, 4+8*DeviceId, 0, 0 },{ 1, 5+8*DeviceId, 0, 0 },{ 1, 6+8*DeviceId, 0, 0 },{ 1, 8+8*DeviceId, 0, 0 } },
//	{ { 0, 0, 8, 0},{ 0, 0, 8, 8 },{ 0, 0, 8, 16 },{ 0, 0, 8, 24 },{ 0, 0, 8, 32 },{ 0, 0, 8, 40 },{ 0, 0, 8, 48 },{ 0, 0, 8, 56 } },
//	{ { 2, 0+16*DeviceId, 0, 0},{ 2, 2+16*DeviceId, 0, 0 },{ 2, 4+16*DeviceId, 0, 0 },{ 2, 6+16*DeviceId, 0, 0 },{ 2, 8+16*DeviceId, 0, 0 },{ 2, 10+16*DeviceId, 0, 0 },{ 2, 12+16*DeviceId, 0, 0 },{ 2, 14+16*DeviceId, 0, 0 } },
//	{ { 0, 0, 16, 0},{ 0, 0, 16, 16 },{ 0, 0, 16, 32 },{ 0, 0, 16, 48 },{ 0, 0, 16, 64 },{ 0, 0, 16, 80 },{ 0, 0, 16, 96 },{ 0, 0, 16, 112 } },
//	{ { 4, 0+32*DeviceId, 0, 0},{ 4, 4+32*DeviceId, 0, 0 },{ 4, 8+32*DeviceId, 0, 0 },{ 4, 12+32*DeviceId, 0, 0 },{ 4, 16+32*DeviceId, 0, 0 },{ 4, 20+32*DeviceId, 0, 0 },{ 4, 24+32*DeviceId, 0, 0 },{ 4, 28+32*DeviceId, 0, 0 } },
//	{ { 0, 0, 16, 0},{ 0, 0, 16, 16 },{ 0, 0, 16, 32 },{ 0, 0, 16, 48 },{ 0, 0, 16, 64 },{ 0, 0, 16, 80 },{ 0, 0, 16, 96 },{ 0, 0, 16, 112 } },
//	{ { 4, 0+32*DeviceId, 0, 0},{ 4, 4+32*DeviceId, 0, 0 },{ 4, 8+32*DeviceId, 0, 0 },{ 4, 12+32*DeviceId, 0, 0 },{ 4, 16+32*DeviceId, 0, 0 },{ 4, 20+32*DeviceId, 0, 0 },{ 4, 24+32*DeviceId, 0, 0 },{ 4, 28+32*DeviceId, 0, 0 } },
//	{ { 0, 0, 32, 0},{ 0, 0, 32, 32 },{ 0, 0, 32, 64 },{ 0, 0, 32, 96 },{ 0, 0, 32, 128 },{ 0, 0, 32, 160 },{ 0, 0, 32, 192 },{ 0, 0, 32, 224 } },
//	{ { 8, 0+64*DeviceId, 0, 0},{ 8, 8+64*DeviceId, 0, 0 },{ 8, 16+64*DeviceId, 0, 0 },{ 8, 24+64*DeviceId, 0, 0 },{ 8, 32+64*DeviceId, 0, 0 },{ 8, 40+64*DeviceId, 0, 0 },{ 8, 48+64*DeviceId, 0, 0 },{ 8, 56+64*DeviceId, 0, 0 } },
//	{ { 0, 0, 32, 0},{ 0, 0, 32, 32 },{ 0, 0, 32, 64 },{ 0, 0, 32, 96 },{ 0, 0, 32, 128 },{ 0, 0, 32, 160 },{ 0, 0, 32, 192 },{ 0, 0, 32, 224 } },
//	{ { 8, 0+64*DeviceId, 0, 0},{ 8, 8+64*DeviceId, 0, 0 },{ 8, 16+64*DeviceId, 0, 0 },{ 8, 24+64*DeviceId, 0, 0 },{ 8, 32+64*DeviceId, 0, 0 },{ 8, 40+64*DeviceId, 0, 0 },{ 8, 48+64*DeviceId, 0, 0 },{ 8, 56+64*DeviceId, 0, 0 } },
//	{ { 0, 0, 64, 0},{ 0, 0, 64, 64 },{ 0, 0, 64, 128 },{ 0, 0, 64, 192 },{ 0, 0, 64, 256 },{ 0, 0, 64, 320 },{ 0, 0, 64, 384 },{ 0, 0, 64, 448 } },
//	{ { 16, 0+128*DeviceId, 64, 0},{ 16, 16+128*DeviceId, 64, 64},{ 16, 32+128*DeviceId, 64, 128},{ 16, 48+128*DeviceId, 64, 192 },{ 16, 64+128*DeviceId, 64, 256 },{ 16, 80+128*DeviceId, 64, 320 },{ 16, 96+128*DeviceId, 64, 384 },{ 16, 112+128*DeviceId, 64, 448 } },
//	{ { 16, 0+128*DeviceId, 0, 0},{ 16, 16+128*DeviceId, 0, 0 },{ 16, 32+128*DeviceId, 0, 0 },{ 16, 48+128*DeviceId, 0, 0 },{ 16, 64+128*DeviceId, 0, 0 },{ 16, 80+128*DeviceId, 0, 0 },{ 16, 96+128*DeviceId, 0, 0 },{ 16, 112+128*DeviceId, 0, 0 } },
//	{ { 0, 0, 128, 0},{ 0, 0, 128, 128 },{ 0, 0, 128, 256 },{ 0, 0, 128, 384 },{ 0, 0, 128, 512 },{ 0, 0, 128, 640 },{ 0, 0, 128, 768 },{ 0, 0, 128, 896 } },
//	{ { 32, 0+256*DeviceId, 0, 0},{ 32, 32+256*DeviceId, 0, 0 },{ 32, 64+256*DeviceId, 0, 0 },{ 32, 96+256*DeviceId, 0, 0 },{ 32, 128+256*DeviceId, 0, 0 },{ 32, 160+256*DeviceId, 0, 0 },{ 32, 192+256*DeviceId, 0, 0 },{ 32, 224+256*DeviceId, 0, 0 } },
//	{ { 0, 0, 64, 0},{ 0, 0, 64, 64 },{ 0, 0, 64, 128 },{ 0, 0, 64, 192 },{ 0, 0, 64, 256 },{ 0, 0, 64, 320 },{ 0, 0, 64, 384 },{ 0, 0, 64, 448 } },
//	{ { 0, 0, 64, 0},{ 0, 0, 64, 64 },{ 0, 0, 64, 128 },{ 0, 0, 64, 192 },{ 0, 0, 64, 256 },{ 0, 0, 64, 320 },{ 0, 0, 64, 384 },{ 0, 0, 64, 448 } },
//	{ { 32, 0+256*DeviceId, 0, 0},{ 32, 32+256*DeviceId, 0, 0 },{ 32, 64+256*DeviceId, 0, 0 },{ 32, 96+256*DeviceId, 0, 0 },{ 32, 128+256*DeviceId, 0, 0 },{ 32, 160+256*DeviceId, 0, 0 },{ 32, 192+256*DeviceId, 0, 0 },{ 32, 224+256*DeviceId, 0, 0 } },
//};
const int channel_group[20][8][4] =
{
	{ { 2, 0, 0, 0 },{ 2, 0, 0, 0 },{ 2, 0, 0, 0 },{ 2, 0, 0, 0 },{ 2, 0, 0, 0 },{ 2, 0, 0, 0 },{ 2, 0, 0, 0 },{ 2, 0, 0, 0 } },
	{ { 2, 0, 0, 0 },{ 2, 0, 0, 0 },{ 2, 0, 0, 0 },{ 2, 0, 0, 0 },{ 2, 0, 0, 0 },{ 2, 0, 0, 0 },{ 2, 0, 0, 0 },{ 2, 0, 0, 0 } },
	{ { 0, 0, 8, 0},{ 0, 0, 8, 8 },{ 0, 0, 8, 16 },{ 0, 0, 8, 24 },{ 0, 0, 8, 32 },{ 0, 0, 8, 40 },{ 0, 0, 8, 48 },{ 0, 0, 8, 56 } },
	{ {3, 0 , 0, 0},{ 3, 0 , 0, 0 },{ 3, 0 , 0, 0 },{ 3, 0 , 0, 0 },{ 3, 0 , 0, 0 },{ 3, 0 , 0, 0 },{ 3, 0 , 0, 0 },{ 3, 0 , 0, 0 } },
	{ { 0, 0, 16, 0},{ 0, 0, 16, 16 },{ 0, 0, 16, 32 },{ 0, 0, 16, 48 },{ 0, 0, 16, 64 },{ 0, 0, 16, 80 },{ 0, 0, 16, 96 },{ 0, 0, 16, 112 } },
	{ {  6, 0 , 0, 0},{ 6, 0 , 0, 0 },{ 6, 0 , 0, 0 },{ 6, 0 , 0, 0 },{ 6, 0 , 0, 0 },{ 6, 0 , 0, 0 },{ 6, 0 , 0, 0 },{ 6, 0 , 0, 0 } },
	{ { 0, 0, 16, 0},{ 0, 0, 16, 16 },{ 0, 0, 16, 32 },{ 0, 0, 16, 48 },{ 0, 0, 16, 64 },{ 0, 0, 16, 80 },{ 0, 0, 16, 96 },{ 0, 0, 16, 112 } },
	{ {  6, 0 , 0, 0},{ 6, 0 , 0, 0 },{ 6, 0 , 0, 0 },{ 6, 0 , 0, 0 },{ 6, 0 , 0, 0 },{ 6, 0 , 0, 0 },{ 6, 0 , 0, 0 },{ 6, 0 , 0, 0 } },
	{ { 0, 0, 32, 0},{ 0, 0, 32, 32 },{ 0, 0, 32, 64 },{ 0, 0, 32, 96 },{ 0, 0, 32, 128 },{ 0, 0, 32, 160 },{ 0, 0, 32, 192 },{ 0, 0, 32, 224 } },
	{ {  11, 0 , 0, 0},{ 11, 0 , 0, 0 },{ 11, 0 , 0, 0 },{ 11, 0 , 0, 0 },{ 11, 0 , 0, 0 },{ 11, 0 , 0, 0 },{ 11, 0 , 0, 0 },{ 11, 0 , 0, 0 } },
	{ { 0, 0, 32, 0},{ 0, 0, 32, 32 },{ 0, 0, 32, 64 },{ 0, 0, 32, 96 },{ 0, 0, 32, 128 },{ 0, 0, 32, 160 },{ 0, 0, 32, 192 },{ 0, 0, 32, 224 } },
	{ {  11, 0 , 0, 0},{ 11, 0 , 0, 0 },{ 11, 0 , 0, 0 },{ 11, 0 , 0, 0 },{ 11, 0 , 0, 0 },{ 11, 0 , 0, 0 },{ 11, 0 , 0, 0 },{ 11, 0 , 0, 0 } },
	{ { 0, 0, 64, 0},{ 0, 0, 64, 64 },{ 0, 0, 64, 128 },{ 0, 0, 64, 192 },{ 0, 0, 64, 256 },{ 0, 0, 64, 320 },{ 0, 0, 64, 384 },{ 0, 0, 64, 448 } },
	{ { 22, 0, 64, 0},{ 22, 0, 64, 64},{ 22, 0, 64, 128},{ 22, 0, 64, 192 },{ 22, 0, 64, 256 },{ 22, 0, 64, 320 },{ 22, 0, 64, 384 },{ 22, 0, 64, 448 } },
	{ {  22, 0 , 0, 0},{ 22, 0 , 0, 0 },{ 22, 0 , 0, 0 },{ 22, 0 , 0, 0 },{ 22, 0 , 0, 0 },{ 22, 0 , 0, 0 },{ 22, 0 , 0, 0 },{ 22, 0 , 0, 0 } },
	{ { 0, 0, 128, 0},{ 0, 0, 128, 128 },{ 0, 0, 128, 256 },{ 0, 0, 128, 384 },{ 0, 0, 128, 512 },{ 0, 0, 128, 640 },{ 0, 0, 128, 768 },{ 0, 0, 128, 896 } },
	{ { 43,0 , 0, 0},{ 43, 0 , 0, 0 },{ 43,0 , 0, 0 },{ 43, 0 , 0, 0 },{ 43, 0 , 0, 0 },{ 43, 0 , 0, 0 },{ 43, 0 , 0, 0 },{ 43,0 , 0, 0 } },
	{ { 0, 0, 64, 0},{ 0, 0, 64, 64 },{ 0, 0, 64, 128 },{ 0, 0, 64, 192 },{ 0, 0, 64, 256 },{ 0, 0, 64, 320 },{ 0, 0, 64, 384 },{ 0, 0, 64, 448 } },
	{ { 0, 0, 64, 0},{ 0, 0, 64, 64 },{ 0, 0, 64, 128 },{ 0, 0, 64, 192 },{ 0, 0, 64, 256 },{ 0, 0, 64, 320 },{ 0, 0, 64, 384 },{ 0, 0, 64, 448 } },
	{ { 43,0 , 0, 0},{ 43, 0 , 0, 0 },{ 43,0 , 0, 0 },{ 43, 0 , 0, 0 },{ 43, 0 , 0, 0 },{ 43, 0 , 0, 0 },{ 43, 0 , 0, 0 },{ 43,0 , 0, 0 } },
};





sensenet_t* sensenet_open(unsigned int core);

void concat(float* input1,float* input2,float* output);
void globalavg_pool_group(
	float* input,
	float* output,
	int layerno,
	int corenum);
void conv_3x3_outputgroup_L2(float* input,float* weight,float* bias,float* output,int layer_no,int inputgroupno,int stride);
void dw_conv_1x1_outputgroup_L2(float* input, float* weight, float* bias, float* output, int layer_no, int outputgroupno, int stride);
void dw_conv_3x3_inputgroup_L2(float* input, float* weight, float* bias, float* output, int layer_no, int inputgroupno,int k_size, int stride, int pad);

void dw_conv_3x3_inputgroup_L21(float* input, float* weight, float* bias, float* output, int layer_no, int inputgroupno,int k_size, int stride, int pad);
//int SrioSendData(uint32_t LocalDeviceID, uint32_t DstDeviceId, uint32_t LocalAddr, uint32_t DstAddr, uint32_t DataLen);
#endif
